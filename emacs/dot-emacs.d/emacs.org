#+TITLE:  Emacs Configuration File
#+AUTHOR: Paul Heely


* Introduction
  This is my attempt at using a literate style to keep my =.emacs= in order.

** Credit
   The basis of the split emacs config files from Howard Abrams, https://github.com/howardabrams/dot-files

   Additional ideas stolen from:
   - https://github.com/larstvei/dot-emacs
   - http://doc.norang.ca/org-mode.html

** Loading this File

   To "load" the contents of this file, add the following to =$HOME/.emacs=:

   #+BEGIN_SRC elisp :tangle no
     ;; Load our Literate Programming version of our Dot Emacs
     ;; file, from file: ~/Work/dot-files/emacs.org
     (unless (boundp 'aquamacs-version)
       (load-file "~/.emacs.d/generated-elisp/init-main.el")
       (server-start))
   #+END_SRC

* General Settings
** Autosaves & Backup Files
   To reduce noise, put autosaves and backups into a single directory
   #+BEGIN_SRC elisp
   (defvar emacs-autosave-directory
     (concat user-emacs-directory "autosaves/")
     "This variable dictates where to put auto saves. It is set to a
     directory called autosaves located wherever your .emacs.d/ is
     located.")
   #+END_SRC

   Create the autosaves directory if it does not exist

   #+BEGIN_SRC elisp
   (when (not (file-exists-p emacs-autosave-directory))
     (message "Make directory: %s" emacs-autosave-directory)
     (make-directory emacs-autosave-directory))
   #+END_SRC
   

   Sets all files to be backed up and auto saved in a single directory.

   #+BEGIN_SRC elisp
   (setq backup-directory-alist
         `((".*" . ,emacs-autosave-directory))
         auto-save-file-name-transforms
         `((".*" ,emacs-autosave-directory t)))
   #+END_SRC

** Simplify yes-or-no
   #+BEGIN_SRC elisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Emacs customizations
   Save customizaitons made through Emacs into their own file
   #+BEGIN_SRC elisp
   (setq custom-file (concat user-emacs-directory "custom.el"))
   (when (file-exists-p custom-file)
     (load custom-file))
   #+END_SRC

** Setting up the Load Path
   Split elisp that is checked-in from the generated stuff.

   #+BEGIN_SRC elisp
     (add-to-list 'load-path (concat user-emacs-directory "elisp"))
     (add-to-list 'load-path (concat user-emacs-directory "generated-elisp"))
   #+END_SRC

** Load Private Setting 
   I keep some stuff out of git and/or specific to the system I'm running on, e.g. work vs personal computer
   #+BEGIN_SRC elisp
     (add-hook
       'after-init-hook
       (lambda ()
         (let ((private-file (concat user-emacs-directory "private.el")))
	   (when (file-exists-p private-file)
	     (load-file private-file)))))
   #+END_SRC

** Modernizing Emacs

   With a long history of working on small machines without gigabytes
   of RAM, we might as well let Emacs be the beast it has always
   dreamed.

   First, letâ€™s increase the cache before starting garbage collection:
   #+BEGIN_SRC elisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC

   Found [[https://github.com/wasamasa/dotemacs/blob/master/init.org#init][here]] how to remove the warnings from the GnuTLS library when
   using HTTPS... increase the minimum prime bits size:
   #+BEGIN_SRC elisp
     (setq gnutls-min-prime-bits 4096)
   #+END_SRC

** No Tabs
   Tabs in source are bad, but presrve the default of 8. Most modes will override with mode specific values
   
   #+BEGIN_SRC elisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 8)
   #+END_SRC

   Indent then do completions
   
   #+BEGIN_SRC
     (setq-default tab-always-indent 'complete)
   #+END_SRC

** Modes
   

* Package Control
** Package Manager
   Load some additional repos to pull packages from
   #+BEGIN_SRC elisp
     (require 'package)
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
     (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
     
     (package-initialize)
     (package-refresh-contents)
   #+END_SRC

** Use-Package
   =use-package= makes it easy to install and lazy load other packages
   
   #+BEGIN_SRC elisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     
     (require 'use-package)
   #+END_SRC

* Technical Artifacts
** Configure the Graphical Settings

   If we are running in a windowed environment where we can set up
   fonts and whatnot, call the 'mac' stuff... which will still work
   for Linux too.

   #+BEGIN_SRC elisp :tangle no
     (if (window-system)
        (require 'init-client)
      (require 'init-server))
   #+END_SRC

** Load up the Local Configuration

   Before we finish, we need to check if there is a local file for us
   to load and evaluate.  We assume the local file has been tangled
   and provides the =init-local= key:

   #+BEGIN_SRC elisp :tangle no
     (require 'init-local nil t)
   #+END_SRC


   After the first load, we can reload this with a require:

   #+BEGIN_SRC elisp
     (provide 'init-main)
   #+END_SRC

   Before you can build this on a new system, make sure that you put
   the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/generated-elisp/init-main.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
